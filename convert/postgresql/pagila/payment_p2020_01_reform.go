// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package pagila

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type paymentP202001ViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *paymentP202001ViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("payment_p2020_01").
func (v *paymentP202001ViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *paymentP202001ViewType) Columns() []string {
	return []string{
		"payment_id",
		"customer_id",
		"staff_id",
		"rental_id",
		"amount",
		"payment_date",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *paymentP202001ViewType) NewStruct() reform.Struct {
	return new(PaymentP202001)
}

// PaymentP202001View represents payment_p2020_01 view or table in SQL database.
var PaymentP202001View = &paymentP202001ViewType{
	s: parse.StructInfo{
		Type:    "PaymentP202001",
		SQLName: "payment_p2020_01",
		Fields: []parse.FieldInfo{
			{Name: "PaymentID", Type: "int32", Column: "payment_id"},
			{Name: "CustomerID", Type: "int32", Column: "customer_id"},
			{Name: "StaffID", Type: "int32", Column: "staff_id"},
			{Name: "RentalID", Type: "int32", Column: "rental_id"},
			{Name: "Amount", Type: "string", Column: "amount"},
			{Name: "PaymentDate", Type: "time.Time", Column: "payment_date"},
		},
		PKFieldIndex: -1,
	},
	z: new(PaymentP202001).Values(),
}

// String returns a string representation of this struct or record.
func (s PaymentP202001) String() string {
	res := make([]string, 6)
	res[0] = "PaymentID: " + reform.Inspect(s.PaymentID, true)
	res[1] = "CustomerID: " + reform.Inspect(s.CustomerID, true)
	res[2] = "StaffID: " + reform.Inspect(s.StaffID, true)
	res[3] = "RentalID: " + reform.Inspect(s.RentalID, true)
	res[4] = "Amount: " + reform.Inspect(s.Amount, true)
	res[5] = "PaymentDate: " + reform.Inspect(s.PaymentDate, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *PaymentP202001) Values() []interface{} {
	return []interface{}{
		s.PaymentID,
		s.CustomerID,
		s.StaffID,
		s.RentalID,
		s.Amount,
		s.PaymentDate,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *PaymentP202001) Pointers() []interface{} {
	return []interface{}{
		&s.PaymentID,
		&s.CustomerID,
		&s.StaffID,
		&s.RentalID,
		&s.Amount,
		&s.PaymentDate,
	}
}

// View returns View object for that struct.
func (s *PaymentP202001) View() reform.View {
	return PaymentP202001View
}

// check interfaces
var (
	_ reform.View   = PaymentP202001View
	_ reform.Struct = (*PaymentP202001)(nil)
	_ fmt.Stringer  = (*PaymentP202001)(nil)
)

func init() {
	parse.AssertUpToDate(&PaymentP202001View.s, new(PaymentP202001))
}
