// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package pagila

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type staffTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *staffTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("staff").
func (v *staffTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *staffTableType) Columns() []string {
	return []string{
		"staff_id",
		"first_name",
		"last_name",
		"address_id",
		"email",
		"store_id",
		"active",
		"username",
		"password",
		"last_update",
		"picture",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *staffTableType) NewStruct() reform.Struct {
	return new(Staff)
}

// NewRecord makes a new record for that table.
func (v *staffTableType) NewRecord() reform.Record {
	return new(Staff)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *staffTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// StaffTable represents staff view or table in SQL database.
var StaffTable = &staffTableType{
	s: parse.StructInfo{
		Type:    "Staff",
		SQLName: "staff",
		Fields: []parse.FieldInfo{
			{Name: "StaffID", Type: "int32", Column: "staff_id"},
			{Name: "FirstName", Type: "string", Column: "first_name"},
			{Name: "LastName", Type: "string", Column: "last_name"},
			{Name: "AddressID", Type: "int32", Column: "address_id"},
			{Name: "Email", Type: "*string", Column: "email"},
			{Name: "StoreID", Type: "int32", Column: "store_id"},
			{Name: "Active", Type: "bool", Column: "active"},
			{Name: "Username", Type: "string", Column: "username"},
			{Name: "Password", Type: "*string", Column: "password"},
			{Name: "LastUpdate", Type: "time.Time", Column: "last_update"},
			{Name: "Picture", Type: "[]uint8", Column: "picture"},
		},
		PKFieldIndex: 0,
	},
	z: new(Staff).Values(),
}

// String returns a string representation of this struct or record.
func (s Staff) String() string {
	res := make([]string, 11)
	res[0] = "StaffID: " + reform.Inspect(s.StaffID, true)
	res[1] = "FirstName: " + reform.Inspect(s.FirstName, true)
	res[2] = "LastName: " + reform.Inspect(s.LastName, true)
	res[3] = "AddressID: " + reform.Inspect(s.AddressID, true)
	res[4] = "Email: " + reform.Inspect(s.Email, true)
	res[5] = "StoreID: " + reform.Inspect(s.StoreID, true)
	res[6] = "Active: " + reform.Inspect(s.Active, true)
	res[7] = "Username: " + reform.Inspect(s.Username, true)
	res[8] = "Password: " + reform.Inspect(s.Password, true)
	res[9] = "LastUpdate: " + reform.Inspect(s.LastUpdate, true)
	res[10] = "Picture: " + reform.Inspect(s.Picture, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Staff) Values() []interface{} {
	return []interface{}{
		s.StaffID,
		s.FirstName,
		s.LastName,
		s.AddressID,
		s.Email,
		s.StoreID,
		s.Active,
		s.Username,
		s.Password,
		s.LastUpdate,
		s.Picture,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Staff) Pointers() []interface{} {
	return []interface{}{
		&s.StaffID,
		&s.FirstName,
		&s.LastName,
		&s.AddressID,
		&s.Email,
		&s.StoreID,
		&s.Active,
		&s.Username,
		&s.Password,
		&s.LastUpdate,
		&s.Picture,
	}
}

// View returns View object for that struct.
func (s *Staff) View() reform.View {
	return StaffTable
}

// Table returns Table object for that record.
func (s *Staff) Table() reform.Table {
	return StaffTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Staff) PKValue() interface{} {
	return s.StaffID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Staff) PKPointer() interface{} {
	return &s.StaffID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Staff) HasPK() bool {
	return s.StaffID != StaffTable.z[StaffTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.StaffID = pk.
func (s *Staff) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = StaffTable
	_ reform.Struct = (*Staff)(nil)
	_ reform.Table  = StaffTable
	_ reform.Record = (*Staff)(nil)
	_ fmt.Stringer  = (*Staff)(nil)
)

func init() {
	parse.AssertUpToDate(&StaffTable.s, new(Staff))
}
