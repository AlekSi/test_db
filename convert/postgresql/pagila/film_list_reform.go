// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package pagila

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type filmListViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *filmListViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("film_list").
func (v *filmListViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *filmListViewType) Columns() []string {
	return []string{
		"fid",
		"title",
		"description",
		"category",
		"price",
		"length",
		"rating",
		"actors",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *filmListViewType) NewStruct() reform.Struct {
	return new(FilmList)
}

// FilmListView represents film_list view or table in SQL database.
var FilmListView = &filmListViewType{
	s: parse.StructInfo{
		Type:    "FilmList",
		SQLName: "film_list",
		Fields: []parse.FieldInfo{
			{Name: "Fid", Type: "*int32", Column: "fid"},
			{Name: "Title", Type: "*string", Column: "title"},
			{Name: "Description", Type: "*string", Column: "description"},
			{Name: "Category", Type: "*string", Column: "category"},
			{Name: "Price", Type: "*string", Column: "price"},
			{Name: "Length", Type: "*int16", Column: "length"},
			{Name: "Rating", Type: "[]uint8", Column: "rating"},
			{Name: "Actors", Type: "*string", Column: "actors"},
		},
		PKFieldIndex: -1,
	},
	z: new(FilmList).Values(),
}

// String returns a string representation of this struct or record.
func (s FilmList) String() string {
	res := make([]string, 8)
	res[0] = "Fid: " + reform.Inspect(s.Fid, true)
	res[1] = "Title: " + reform.Inspect(s.Title, true)
	res[2] = "Description: " + reform.Inspect(s.Description, true)
	res[3] = "Category: " + reform.Inspect(s.Category, true)
	res[4] = "Price: " + reform.Inspect(s.Price, true)
	res[5] = "Length: " + reform.Inspect(s.Length, true)
	res[6] = "Rating: " + reform.Inspect(s.Rating, true)
	res[7] = "Actors: " + reform.Inspect(s.Actors, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *FilmList) Values() []interface{} {
	return []interface{}{
		s.Fid,
		s.Title,
		s.Description,
		s.Category,
		s.Price,
		s.Length,
		s.Rating,
		s.Actors,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *FilmList) Pointers() []interface{} {
	return []interface{}{
		&s.Fid,
		&s.Title,
		&s.Description,
		&s.Category,
		&s.Price,
		&s.Length,
		&s.Rating,
		&s.Actors,
	}
}

// View returns View object for that struct.
func (s *FilmList) View() reform.View {
	return FilmListView
}

// check interfaces
var (
	_ reform.View   = FilmListView
	_ reform.Struct = (*FilmList)(nil)
	_ fmt.Stringer  = (*FilmList)(nil)
)

func init() {
	parse.AssertUpToDate(&FilmListView.s, new(FilmList))
}
