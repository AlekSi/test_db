// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package pagila

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type inventoryTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *inventoryTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("inventory").
func (v *inventoryTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *inventoryTableType) Columns() []string {
	return []string{
		"inventory_id",
		"film_id",
		"store_id",
		"last_update",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *inventoryTableType) NewStruct() reform.Struct {
	return new(Inventory)
}

// NewRecord makes a new record for that table.
func (v *inventoryTableType) NewRecord() reform.Record {
	return new(Inventory)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *inventoryTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// InventoryTable represents inventory view or table in SQL database.
var InventoryTable = &inventoryTableType{
	s: parse.StructInfo{
		Type:    "Inventory",
		SQLName: "inventory",
		Fields: []parse.FieldInfo{
			{Name: "InventoryID", Type: "int32", Column: "inventory_id"},
			{Name: "FilmID", Type: "int32", Column: "film_id"},
			{Name: "StoreID", Type: "int32", Column: "store_id"},
			{Name: "LastUpdate", Type: "time.Time", Column: "last_update"},
		},
		PKFieldIndex: 0,
	},
	z: new(Inventory).Values(),
}

// String returns a string representation of this struct or record.
func (s Inventory) String() string {
	res := make([]string, 4)
	res[0] = "InventoryID: " + reform.Inspect(s.InventoryID, true)
	res[1] = "FilmID: " + reform.Inspect(s.FilmID, true)
	res[2] = "StoreID: " + reform.Inspect(s.StoreID, true)
	res[3] = "LastUpdate: " + reform.Inspect(s.LastUpdate, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Inventory) Values() []interface{} {
	return []interface{}{
		s.InventoryID,
		s.FilmID,
		s.StoreID,
		s.LastUpdate,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Inventory) Pointers() []interface{} {
	return []interface{}{
		&s.InventoryID,
		&s.FilmID,
		&s.StoreID,
		&s.LastUpdate,
	}
}

// View returns View object for that struct.
func (s *Inventory) View() reform.View {
	return InventoryTable
}

// Table returns Table object for that record.
func (s *Inventory) Table() reform.Table {
	return InventoryTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Inventory) PKValue() interface{} {
	return s.InventoryID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Inventory) PKPointer() interface{} {
	return &s.InventoryID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Inventory) HasPK() bool {
	return s.InventoryID != InventoryTable.z[InventoryTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.InventoryID = pk.
func (s *Inventory) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = InventoryTable
	_ reform.Struct = (*Inventory)(nil)
	_ reform.Table  = InventoryTable
	_ reform.Record = (*Inventory)(nil)
	_ fmt.Stringer  = (*Inventory)(nil)
)

func init() {
	parse.AssertUpToDate(&InventoryTable.s, new(Inventory))
}
