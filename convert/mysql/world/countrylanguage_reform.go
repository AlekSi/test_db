// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package world

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type countryLanguageViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *countryLanguageViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("countrylanguage").
func (v *countryLanguageViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *countryLanguageViewType) Columns() []string {
	return []string{
		"CountryCode",
		"Language",
		"IsOfficial",
		"Percentage",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *countryLanguageViewType) NewStruct() reform.Struct {
	return new(CountryLanguage)
}

// CountryLanguageView represents countrylanguage view or table in SQL database.
var CountryLanguageView = &countryLanguageViewType{
	s: parse.StructInfo{
		Type:    "CountryLanguage",
		SQLName: "countrylanguage",
		Fields: []parse.FieldInfo{
			{Name: "CountryCode", Type: "string", Column: "CountryCode"},
			{Name: "Language", Type: "string", Column: "Language"},
			{Name: "IsOfficial", Type: "[]uint8", Column: "IsOfficial"},
			{Name: "Percentage", Type: "string", Column: "Percentage"},
		},
		PKFieldIndex: -1,
	},
	z: new(CountryLanguage).Values(),
}

// String returns a string representation of this struct or record.
func (s CountryLanguage) String() string {
	res := make([]string, 4)
	res[0] = "CountryCode: " + reform.Inspect(s.CountryCode, true)
	res[1] = "Language: " + reform.Inspect(s.Language, true)
	res[2] = "IsOfficial: " + reform.Inspect(s.IsOfficial, true)
	res[3] = "Percentage: " + reform.Inspect(s.Percentage, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *CountryLanguage) Values() []interface{} {
	return []interface{}{
		s.CountryCode,
		s.Language,
		s.IsOfficial,
		s.Percentage,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *CountryLanguage) Pointers() []interface{} {
	return []interface{}{
		&s.CountryCode,
		&s.Language,
		&s.IsOfficial,
		&s.Percentage,
	}
}

// View returns View object for that struct.
func (s *CountryLanguage) View() reform.View {
	return CountryLanguageView
}

// check interfaces
var (
	_ reform.View   = CountryLanguageView
	_ reform.Struct = (*CountryLanguage)(nil)
	_ fmt.Stringer  = (*CountryLanguage)(nil)
)

func init() {
	parse.AssertUpToDate(&CountryLanguageView.s, new(CountryLanguage))
}
