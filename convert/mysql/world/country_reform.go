// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package world

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type countryTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *countryTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("country").
func (v *countryTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *countryTableType) Columns() []string {
	return []string{
		"Code",
		"Name",
		"Continent",
		"Region",
		"SurfaceArea",
		"IndepYear",
		"Population",
		"LifeExpectancy",
		"GNP",
		"GNPOld",
		"LocalName",
		"GovernmentForm",
		"HeadOfState",
		"Capital",
		"Code2",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *countryTableType) NewStruct() reform.Struct {
	return new(Country)
}

// NewRecord makes a new record for that table.
func (v *countryTableType) NewRecord() reform.Record {
	return new(Country)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *countryTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// CountryTable represents country view or table in SQL database.
var CountryTable = &countryTableType{
	s: parse.StructInfo{
		Type:    "Country",
		SQLName: "country",
		Fields: []parse.FieldInfo{
			{Name: "Code", Type: "string", Column: "Code"},
			{Name: "Name", Type: "string", Column: "Name"},
			{Name: "Continent", Type: "[]uint8", Column: "Continent"},
			{Name: "Region", Type: "string", Column: "Region"},
			{Name: "SurfaceArea", Type: "string", Column: "SurfaceArea"},
			{Name: "IndepYear", Type: "*int16", Column: "IndepYear"},
			{Name: "Population", Type: "int32", Column: "Population"},
			{Name: "LifeExpectancy", Type: "*string", Column: "LifeExpectancy"},
			{Name: "GNP", Type: "*string", Column: "GNP"},
			{Name: "GNPOld", Type: "*string", Column: "GNPOld"},
			{Name: "LocalName", Type: "string", Column: "LocalName"},
			{Name: "GovernmentForm", Type: "string", Column: "GovernmentForm"},
			{Name: "HeadOfState", Type: "*string", Column: "HeadOfState"},
			{Name: "Capital", Type: "*int32", Column: "Capital"},
			{Name: "Code2", Type: "string", Column: "Code2"},
		},
		PKFieldIndex: 0,
	},
	z: new(Country).Values(),
}

// String returns a string representation of this struct or record.
func (s Country) String() string {
	res := make([]string, 15)
	res[0] = "Code: " + reform.Inspect(s.Code, true)
	res[1] = "Name: " + reform.Inspect(s.Name, true)
	res[2] = "Continent: " + reform.Inspect(s.Continent, true)
	res[3] = "Region: " + reform.Inspect(s.Region, true)
	res[4] = "SurfaceArea: " + reform.Inspect(s.SurfaceArea, true)
	res[5] = "IndepYear: " + reform.Inspect(s.IndepYear, true)
	res[6] = "Population: " + reform.Inspect(s.Population, true)
	res[7] = "LifeExpectancy: " + reform.Inspect(s.LifeExpectancy, true)
	res[8] = "GNP: " + reform.Inspect(s.GNP, true)
	res[9] = "GNPOld: " + reform.Inspect(s.GNPOld, true)
	res[10] = "LocalName: " + reform.Inspect(s.LocalName, true)
	res[11] = "GovernmentForm: " + reform.Inspect(s.GovernmentForm, true)
	res[12] = "HeadOfState: " + reform.Inspect(s.HeadOfState, true)
	res[13] = "Capital: " + reform.Inspect(s.Capital, true)
	res[14] = "Code2: " + reform.Inspect(s.Code2, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Country) Values() []interface{} {
	return []interface{}{
		s.Code,
		s.Name,
		s.Continent,
		s.Region,
		s.SurfaceArea,
		s.IndepYear,
		s.Population,
		s.LifeExpectancy,
		s.GNP,
		s.GNPOld,
		s.LocalName,
		s.GovernmentForm,
		s.HeadOfState,
		s.Capital,
		s.Code2,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Country) Pointers() []interface{} {
	return []interface{}{
		&s.Code,
		&s.Name,
		&s.Continent,
		&s.Region,
		&s.SurfaceArea,
		&s.IndepYear,
		&s.Population,
		&s.LifeExpectancy,
		&s.GNP,
		&s.GNPOld,
		&s.LocalName,
		&s.GovernmentForm,
		&s.HeadOfState,
		&s.Capital,
		&s.Code2,
	}
}

// View returns View object for that struct.
func (s *Country) View() reform.View {
	return CountryTable
}

// Table returns Table object for that record.
func (s *Country) Table() reform.Table {
	return CountryTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Country) PKValue() interface{} {
	return s.Code
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Country) PKPointer() interface{} {
	return &s.Code
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Country) HasPK() bool {
	return s.Code != CountryTable.z[CountryTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.Code = pk.
func (s *Country) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = CountryTable
	_ reform.Struct = (*Country)(nil)
	_ reform.Table  = CountryTable
	_ reform.Record = (*Country)(nil)
	_ fmt.Stringer  = (*Country)(nil)
)

func init() {
	parse.AssertUpToDate(&CountryTable.s, new(Country))
}
