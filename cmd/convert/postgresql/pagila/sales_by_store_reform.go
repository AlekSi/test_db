// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package pagila

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type salesByStoreViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *salesByStoreViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("sales_by_store").
func (v *salesByStoreViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *salesByStoreViewType) Columns() []string {
	return []string{
		"store",
		"manager",
		"total_sales",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *salesByStoreViewType) NewStruct() reform.Struct {
	return new(SalesByStore)
}

// SalesByStoreView represents sales_by_store view or table in SQL database.
var SalesByStoreView = &salesByStoreViewType{
	s: parse.StructInfo{
		Type:    "SalesByStore",
		SQLName: "sales_by_store",
		Fields: []parse.FieldInfo{
			{Name: "Store", Type: "*string", Column: "store"},
			{Name: "Manager", Type: "*string", Column: "manager"},
			{Name: "TotalSales", Type: "*string", Column: "total_sales"},
		},
		PKFieldIndex: -1,
	},
	z: new(SalesByStore).Values(),
}

// String returns a string representation of this struct or record.
func (s SalesByStore) String() string {
	res := make([]string, 3)
	res[0] = "Store: " + reform.Inspect(s.Store, true)
	res[1] = "Manager: " + reform.Inspect(s.Manager, true)
	res[2] = "TotalSales: " + reform.Inspect(s.TotalSales, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *SalesByStore) Values() []interface{} {
	return []interface{}{
		s.Store,
		s.Manager,
		s.TotalSales,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *SalesByStore) Pointers() []interface{} {
	return []interface{}{
		&s.Store,
		&s.Manager,
		&s.TotalSales,
	}
}

// View returns View object for that struct.
func (s *SalesByStore) View() reform.View {
	return SalesByStoreView
}

// check interfaces
var (
	_ reform.View   = SalesByStoreView
	_ reform.Struct = (*SalesByStore)(nil)
	_ fmt.Stringer  = (*SalesByStore)(nil)
)

func init() {
	parse.AssertUpToDate(&SalesByStoreView.s, new(SalesByStore))
}
