// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package sakila

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type addressTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *addressTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("address").
func (v *addressTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *addressTableType) Columns() []string {
	return []string{
		"address_id",
		"address",
		"address2",
		"district",
		"city_id",
		"postal_code",
		"phone",
		"location",
		"last_update",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *addressTableType) NewStruct() reform.Struct {
	return new(Address)
}

// NewRecord makes a new record for that table.
func (v *addressTableType) NewRecord() reform.Record {
	return new(Address)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *addressTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// AddressTable represents address view or table in SQL database.
var AddressTable = &addressTableType{
	s: parse.StructInfo{
		Type:    "Address",
		SQLName: "address",
		Fields: []parse.FieldInfo{
			{Name: "AddressID", Type: "int16", Column: "address_id"},
			{Name: "Address", Type: "string", Column: "address"},
			{Name: "Address2", Type: "*string", Column: "address2"},
			{Name: "District", Type: "string", Column: "district"},
			{Name: "CityID", Type: "int16", Column: "city_id"},
			{Name: "PostalCode", Type: "*string", Column: "postal_code"},
			{Name: "Phone", Type: "string", Column: "phone"},
			{Name: "Location", Type: "[]uint8", Column: "location"},
			{Name: "LastUpdate", Type: "time.Time", Column: "last_update"},
		},
		PKFieldIndex: 0,
	},
	z: new(Address).Values(),
}

// String returns a string representation of this struct or record.
func (s Address) String() string {
	res := make([]string, 9)
	res[0] = "AddressID: " + reform.Inspect(s.AddressID, true)
	res[1] = "Address: " + reform.Inspect(s.Address, true)
	res[2] = "Address2: " + reform.Inspect(s.Address2, true)
	res[3] = "District: " + reform.Inspect(s.District, true)
	res[4] = "CityID: " + reform.Inspect(s.CityID, true)
	res[5] = "PostalCode: " + reform.Inspect(s.PostalCode, true)
	res[6] = "Phone: " + reform.Inspect(s.Phone, true)
	res[7] = "Location: " + reform.Inspect(s.Location, true)
	res[8] = "LastUpdate: " + reform.Inspect(s.LastUpdate, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Address) Values() []interface{} {
	return []interface{}{
		s.AddressID,
		s.Address,
		s.Address2,
		s.District,
		s.CityID,
		s.PostalCode,
		s.Phone,
		s.Location,
		s.LastUpdate,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Address) Pointers() []interface{} {
	return []interface{}{
		&s.AddressID,
		&s.Address,
		&s.Address2,
		&s.District,
		&s.CityID,
		&s.PostalCode,
		&s.Phone,
		&s.Location,
		&s.LastUpdate,
	}
}

// View returns View object for that struct.
func (s *Address) View() reform.View {
	return AddressTable
}

// Table returns Table object for that record.
func (s *Address) Table() reform.Table {
	return AddressTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Address) PKValue() interface{} {
	return s.AddressID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Address) PKPointer() interface{} {
	return &s.AddressID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Address) HasPK() bool {
	return s.AddressID != AddressTable.z[AddressTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.AddressID = pk.
func (s *Address) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = AddressTable
	_ reform.Struct = (*Address)(nil)
	_ reform.Table  = AddressTable
	_ reform.Record = (*Address)(nil)
	_ fmt.Stringer  = (*Address)(nil)
)

func init() {
	parse.AssertUpToDate(&AddressTable.s, new(Address))
}
