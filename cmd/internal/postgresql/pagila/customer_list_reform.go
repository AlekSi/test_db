// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package pagila

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type customerListViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *customerListViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("customer_list").
func (v *customerListViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *customerListViewType) Columns() []string {
	return []string{
		"id",
		"name",
		"address",
		"zip code",
		"phone",
		"city",
		"country",
		"notes",
		"sid",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *customerListViewType) NewStruct() reform.Struct {
	return new(CustomerList)
}

// CustomerListView represents customer_list view or table in SQL database.
var CustomerListView = &customerListViewType{
	s: parse.StructInfo{
		Type:    "CustomerList",
		SQLName: "customer_list",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "*int32", Column: "id"},
			{Name: "Name", Type: "*string", Column: "name"},
			{Name: "Address", Type: "*string", Column: "address"},
			{Name: "ZipCode", Type: "*string", Column: "zip code"},
			{Name: "Phone", Type: "*string", Column: "phone"},
			{Name: "City", Type: "*string", Column: "city"},
			{Name: "Country", Type: "*string", Column: "country"},
			{Name: "Notes", Type: "*string", Column: "notes"},
			{Name: "Sid", Type: "*int32", Column: "sid"},
		},
		PKFieldIndex: -1,
	},
	z: new(CustomerList).Values(),
}

// String returns a string representation of this struct or record.
func (s CustomerList) String() string {
	res := make([]string, 9)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Name: " + reform.Inspect(s.Name, true)
	res[2] = "Address: " + reform.Inspect(s.Address, true)
	res[3] = "ZipCode: " + reform.Inspect(s.ZipCode, true)
	res[4] = "Phone: " + reform.Inspect(s.Phone, true)
	res[5] = "City: " + reform.Inspect(s.City, true)
	res[6] = "Country: " + reform.Inspect(s.Country, true)
	res[7] = "Notes: " + reform.Inspect(s.Notes, true)
	res[8] = "Sid: " + reform.Inspect(s.Sid, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *CustomerList) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Name,
		s.Address,
		s.ZipCode,
		s.Phone,
		s.City,
		s.Country,
		s.Notes,
		s.Sid,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *CustomerList) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Name,
		&s.Address,
		&s.ZipCode,
		&s.Phone,
		&s.City,
		&s.Country,
		&s.Notes,
		&s.Sid,
	}
}

// View returns View object for that struct.
func (s *CustomerList) View() reform.View {
	return CustomerListView
}

// check interfaces
var (
	_ reform.View   = CustomerListView
	_ reform.Struct = (*CustomerList)(nil)
	_ fmt.Stringer  = (*CustomerList)(nil)
)

func init() {
	parse.AssertUpToDate(&CustomerListView.s, new(CustomerList))
}
