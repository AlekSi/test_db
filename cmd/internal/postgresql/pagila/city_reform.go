// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package pagila

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type cityTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *cityTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("city").
func (v *cityTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *cityTableType) Columns() []string {
	return []string{
		"city_id",
		"city",
		"country_id",
		"last_update",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *cityTableType) NewStruct() reform.Struct {
	return new(City)
}

// NewRecord makes a new record for that table.
func (v *cityTableType) NewRecord() reform.Record {
	return new(City)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *cityTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// CityTable represents city view or table in SQL database.
var CityTable = &cityTableType{
	s: parse.StructInfo{
		Type:    "City",
		SQLName: "city",
		Fields: []parse.FieldInfo{
			{Name: "CityID", Type: "int32", Column: "city_id"},
			{Name: "City", Type: "string", Column: "city"},
			{Name: "CountryID", Type: "int32", Column: "country_id"},
			{Name: "LastUpdate", Type: "time.Time", Column: "last_update"},
		},
		PKFieldIndex: 0,
	},
	z: new(City).Values(),
}

// String returns a string representation of this struct or record.
func (s City) String() string {
	res := make([]string, 4)
	res[0] = "CityID: " + reform.Inspect(s.CityID, true)
	res[1] = "City: " + reform.Inspect(s.City, true)
	res[2] = "CountryID: " + reform.Inspect(s.CountryID, true)
	res[3] = "LastUpdate: " + reform.Inspect(s.LastUpdate, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *City) Values() []interface{} {
	return []interface{}{
		s.CityID,
		s.City,
		s.CountryID,
		s.LastUpdate,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *City) Pointers() []interface{} {
	return []interface{}{
		&s.CityID,
		&s.City,
		&s.CountryID,
		&s.LastUpdate,
	}
}

// View returns View object for that struct.
func (s *City) View() reform.View {
	return CityTable
}

// Table returns Table object for that record.
func (s *City) Table() reform.Table {
	return CityTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *City) PKValue() interface{} {
	return s.CityID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *City) PKPointer() interface{} {
	return &s.CityID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *City) HasPK() bool {
	return s.CityID != CityTable.z[CityTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.CityID = pk.
func (s *City) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = CityTable
	_ reform.Struct = (*City)(nil)
	_ reform.Table  = CityTable
	_ reform.Record = (*City)(nil)
	_ fmt.Stringer  = (*City)(nil)
)

func init() {
	parse.AssertUpToDate(&CityTable.s, new(City))
}
